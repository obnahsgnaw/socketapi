// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: conninfo/v1/conninfo.proto

package connv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ConnService_Info_FullMethodName      = "/conn.v1.ConnService/Info"
	ConnService_SessionId_FullMethodName = "/conn.v1.ConnService/SessionId"
)

// ConnServiceClient is the client API for ConnService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnServiceClient interface {
	// return the connection info
	Info(ctx context.Context, in *ConnInfoRequest, opts ...grpc.CallOption) (*ConnInfoResponse, error)
	SessionId(ctx context.Context, in *ConnSidRequest, opts ...grpc.CallOption) (*ConnSidResponse, error)
}

type connServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConnServiceClient(cc grpc.ClientConnInterface) ConnServiceClient {
	return &connServiceClient{cc}
}

func (c *connServiceClient) Info(ctx context.Context, in *ConnInfoRequest, opts ...grpc.CallOption) (*ConnInfoResponse, error) {
	out := new(ConnInfoResponse)
	err := c.cc.Invoke(ctx, ConnService_Info_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connServiceClient) SessionId(ctx context.Context, in *ConnSidRequest, opts ...grpc.CallOption) (*ConnSidResponse, error) {
	out := new(ConnSidResponse)
	err := c.cc.Invoke(ctx, ConnService_SessionId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnServiceServer is the server API for ConnService service.
// All implementations must embed UnimplementedConnServiceServer
// for forward compatibility
type ConnServiceServer interface {
	// return the connection info
	Info(context.Context, *ConnInfoRequest) (*ConnInfoResponse, error)
	SessionId(context.Context, *ConnSidRequest) (*ConnSidResponse, error)
	mustEmbedUnimplementedConnServiceServer()
}

// UnimplementedConnServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConnServiceServer struct {
}

func (UnimplementedConnServiceServer) Info(context.Context, *ConnInfoRequest) (*ConnInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedConnServiceServer) SessionId(context.Context, *ConnSidRequest) (*ConnSidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionId not implemented")
}
func (UnimplementedConnServiceServer) mustEmbedUnimplementedConnServiceServer() {}

// UnsafeConnServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnServiceServer will
// result in compilation errors.
type UnsafeConnServiceServer interface {
	mustEmbedUnimplementedConnServiceServer()
}

func RegisterConnServiceServer(s grpc.ServiceRegistrar, srv ConnServiceServer) {
	s.RegisterService(&ConnService_ServiceDesc, srv)
}

func _ConnService_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnServiceServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnService_Info_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnServiceServer).Info(ctx, req.(*ConnInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnService_SessionId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnSidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnServiceServer).SessionId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnService_SessionId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnServiceServer).SessionId(ctx, req.(*ConnSidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConnService_ServiceDesc is the grpc.ServiceDesc for ConnService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConnService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "conn.v1.ConnService",
	HandlerType: (*ConnServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _ConnService_Info_Handler,
		},
		{
			MethodName: "SessionId",
			Handler:    _ConnService_SessionId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "conninfo/v1/conninfo.proto",
}
