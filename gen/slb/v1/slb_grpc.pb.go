// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: slb/v1/slb.proto

package slbv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SlbService_SetActionSlb_FullMethodName = "/slb.v1.SlbService/SetActionSlb"
)

// SlbServiceClient is the client API for SlbService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SlbServiceClient interface {
	// set action slb number, default is fd
	SetActionSlb(ctx context.Context, in *ActionSlbRequest, opts ...grpc.CallOption) (*ActionSLbResponse, error)
}

type slbServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSlbServiceClient(cc grpc.ClientConnInterface) SlbServiceClient {
	return &slbServiceClient{cc}
}

func (c *slbServiceClient) SetActionSlb(ctx context.Context, in *ActionSlbRequest, opts ...grpc.CallOption) (*ActionSLbResponse, error) {
	out := new(ActionSLbResponse)
	err := c.cc.Invoke(ctx, SlbService_SetActionSlb_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SlbServiceServer is the server API for SlbService service.
// All implementations must embed UnimplementedSlbServiceServer
// for forward compatibility
type SlbServiceServer interface {
	// set action slb number, default is fd
	SetActionSlb(context.Context, *ActionSlbRequest) (*ActionSLbResponse, error)
	mustEmbedUnimplementedSlbServiceServer()
}

// UnimplementedSlbServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSlbServiceServer struct {
}

func (UnimplementedSlbServiceServer) SetActionSlb(context.Context, *ActionSlbRequest) (*ActionSLbResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetActionSlb not implemented")
}
func (UnimplementedSlbServiceServer) mustEmbedUnimplementedSlbServiceServer() {}

// UnsafeSlbServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SlbServiceServer will
// result in compilation errors.
type UnsafeSlbServiceServer interface {
	mustEmbedUnimplementedSlbServiceServer()
}

func RegisterSlbServiceServer(s grpc.ServiceRegistrar, srv SlbServiceServer) {
	s.RegisterService(&SlbService_ServiceDesc, srv)
}

func _SlbService_SetActionSlb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionSlbRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlbServiceServer).SetActionSlb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SlbService_SetActionSlb_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlbServiceServer).SetActionSlb(ctx, req.(*ActionSlbRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SlbService_ServiceDesc is the grpc.ServiceDesc for SlbService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SlbService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "slb.v1.SlbService",
	HandlerType: (*SlbServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetActionSlb",
			Handler:    _SlbService_SetActionSlb_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "slb/v1/slb.proto",
}
